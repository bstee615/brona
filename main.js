!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="/",s(s.s=7)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.canvas=document.getElementById("gameCanvas"),e.ctx=e.canvas.getContext("2d"),e.tilesize=e.canvas.width/24,e.pxToGame=function(t){return t/e.tilesize},e.gameToPx=function(t){return t*e.tilesize}},function(t,e,s){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)e.hasOwnProperty(s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e,s,i,n){if(void 0===t&&(t=null),void 0===e&&(e=null),void 0===s&&(s=null),void 0===i&&(i=null),void 0===n&&(n=null),this.loaded=!1,t){this.img=new Image,this.img.src=function(t){return"images/"+t}(t);var r=this;this.img.onload=function(){r.loaded=!0}}this.srcX=e,this.srcY=s,this.srcW=i,this.srcH=n,this.draw=this.draw.bind(this)}return t.prototype.draw=function(t,e,s,i,n){null!=this.srcX&&null!=this.srcY&&null!=this.srcW&&null!=this.srcH?t.drawImage(this.img,this.srcX,this.srcY,this.srcW,this.srcH,e,s,i,n):t.drawImage(this.img,e,s,i,n)},t}();e.default=o;var a=function(t){function e(e,s,i,n,r){var o=t.call(this,e,s,i,n)||this;return o.spr=r,o}return n(e,t),e.prototype.sprite=function(){return this.spr},e}(r(s(4)).default);e.SpriteObject=a},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.colliders=[],e.registerCollider=function(t){e.colliders.push(t)},e.correctCollisions=function(t,s){for(var i=t.x+s.x,n=t.x+t.w+s.x,r=t.y+s.y,o=t.y+t.h+s.y,a=0,l=e.colliders;a<l.length;a++){var c=l[a],u=c.x,h=c.x+c.w,p=c.y,d=c.y+c.h;if(!(i>h||n<u||r>d||o<p)){var f={x:i+n/2,y:o+r/2},g={x:u+h/2,y:d+p/2},v={x:(f.x-g.x)/Math.abs(f.x-g.x),y:(f.y-g.y)/Math.abs(f.y-g.y)};v.x>0?v.y>0?Math.abs(i-h)<Math.abs(r-d)?s.x=h+.001-t.x:s.y=d+.001-t.y:Math.abs(i-h)<Math.abs(o-p)?s.x=h+.001-t.x:s.y=p-.001-(t.y+t.h):v.y>0?Math.abs(n-u)<Math.abs(r-d)?s.x=u-.001-(t.x+t.w):s.y=d+.001-t.y:Math.abs(n-u)<Math.abs(o-p)?s.x=u-.001-(t.x+t.w):s.y=p-.001-(t.y+t.h)}}return s}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(0);e.mousedown=!1,e.rightMousedown=!1,e.mousePosition={x:0,y:0},i.canvas.addEventListener("mousedown",(function(t){0==t.button?e.mousedown=!0:2==t.button&&(e.rightMousedown=!0)})),i.canvas.addEventListener("mouseup",(function(t){0==t.button?e.mousedown=!1:2==t.button&&(e.rightMousedown=!1)})),i.canvas.addEventListener("mousemove",(function(t){e.mousePosition.x=t.offsetX,e.mousePosition.y=t.offsetY}))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(0),n=function(){function t(t,e,s,i){this.x=t,this.y=e,this.w=s,this.h=i,this.draw=this.draw.bind(this)}return t.prototype.draw=function(t){this.sprite().draw(t,i.gameToPx(this.x),i.gameToPx(this.y),i.gameToPx(this.w),i.gameToPx(this.h))},t.prototype.sprite=function(){throw new Error("sprite() not implemented")},t}();e.default=n},function(t,e,s){var i={corePath:"https://cdn.jsdelivr.net/gh/naptha/tesseract.js-core@0.1.0/index.js",langPath:"https://tessdata.projectnaptha.com/3.02/"};if("development"===Object({BASE_URL:"http://benjijang.com/brona/",NODE_ENV:"production"}).TESS_ENV)console.debug("Using Development Configuration"),i.workerPath=location.protocol+"//"+location.host+"/dist/worker.dev.js?nocache="+Math.random().toString(36).slice(3);else{var n=s(6).version;i.workerPath="https://cdn.jsdelivr.net/gh/naptha/tesseract.js@"+n+"/dist/worker.js"}e.defaultOptions=i,e.spawnWorker=function(t,e){if(Blob&&URL)var s=new Blob(['importScripts("'+e.workerPath+'");'],{type:"application/javascript"}),i=new Worker(URL.createObjectURL(s));else i=new Worker(e.workerPath);return i.onmessage=function(e){var s=e.data;t._recv(s)},i},e.terminateWorker=function(t){t.worker.terminate()},e.sendPacket=function(t,e){!function t(e,s){if("string"==typeof e){if(/^\#/.test(e))return t(document.querySelector(e),s);if(/(blob|data)\:/.test(e)){var i=new Image;return i.src=e,i.onload=e=>t(i,s),void(i.onerror=t=>{throw t})}var n=new XMLHttpRequest;return n.open("GET",e,!0),n.responseType="blob",n.onload=e=>{if(n.status>=400)throw new Error("Fail to get image as Blob");t(n.response,s)},n.onerror=t=>{throw t},void n.send(null)}if(e instanceof File){var r=new FileReader;return r.onload=e=>t(r.result,s),r.onerror=t=>{throw t},void r.readAsDataURL(e)}if(e instanceof Blob)return t(URL.createObjectURL(e),s);if(e.getContext)return t(e.getContext("2d"),s);if("IMG"==e.tagName||"VIDEO"==e.tagName){var o=document.createElement("canvas");o.width=e.naturalWidth||e.videoWidth,o.height=e.naturalHeight||e.videoHeight;var a=o.getContext("2d");return a.drawImage(e,0,0),t(a,s)}if(e.getImageData){var l=e.getImageData(0,0,e.canvas.width,e.canvas.height);return t(l,s)}return s(e)}(e.payload.image,(function(s){e.payload.image=s,t.worker.postMessage(e)}))}},function(t){t.exports=JSON.parse('{"_args":[["tesseract.js@1.0.19","/home/travis/build/bstee615/brona"]],"_development":true,"_from":"tesseract.js@1.0.19","_id":"tesseract.js@1.0.19","_inBundle":false,"_integrity":"sha512-UXnCd2GkDOuVwPYv8MryzDwXEPLJ/BjEuT76PWzVC8XhZbsChRkpoiKDSGDbZ2BW2rwg1yBWJ0joSdCTw1umBA==","_location":"/tesseract.js","_phantomChildren":{},"_requested":{"type":"version","registry":true,"raw":"tesseract.js@1.0.19","name":"tesseract.js","escapedName":"tesseract.js","rawSpec":"1.0.19","saveSpec":null,"fetchSpec":"1.0.19"},"_requiredBy":["#DEV:/"],"_resolved":"https://registry.npmjs.org/tesseract.js/-/tesseract.js-1.0.19.tgz","_spec":"1.0.19","_where":"/home/travis/build/bstee615/brona","author":"","browser":{"./src/node/index.js":"./src/browser/index.js"},"bugs":{"url":"https://github.com/naptha/tesseract.js/issues"},"dependencies":{"file-type":"^3.8.0","is-url":"1.2.2","isomorphic-fetch":"^2.2.1","jpeg-js":"^0.2.0","level-js":"^2.2.4","node-fetch":"^1.6.3","object-assign":"^4.1.0","png.js":"^0.2.1","tesseract.js-core":"^1.0.2"},"description":"Pure Javascript Multilingual OCR","devDependencies":{"babel-preset-es2015":"^6.16.0","babelify":"^7.3.0","browserify":"^13.1.0","concurrently":"^3.1.0","envify":"^3.4.1","http-server":"^0.9.0","pako":"^1.0.3","uglify-js":"^3.4.9","watchify":"^3.7.0"},"homepage":"https://github.com/naptha/tesseract.js","license":"Apache-2.0","main":"src/index.js","name":"tesseract.js","repository":{"type":"git","url":"git+https://github.com/naptha/tesseract.js.git"},"scripts":{"build":"browserify src/index.js -t [ babelify --presets [ es2015 ] ] -o dist/tesseract.js --standalone Tesseract && browserify src/browser/worker.js -t [ babelify --presets [ es2015 ] ] -o dist/worker.js && uglifyjs dist/tesseract.js --source-map -o dist/tesseract.min.js && uglifyjs dist/worker.js --source-map -o dist/worker.min.js","release":"npm run build && git commit -am \'new release\' && git push && git tag `jq -r \'.version\' package.json` && git push origin --tags && npm publish","start":"concurrently --kill-others \\"watchify src/index.js  -t [ envify --TESS_ENV development ] -t [ babelify --presets [ es2015 ] ] -o dist/tesseract.dev.js --standalone Tesseract\\" \\"watchify src/browser/worker.js  -t [ envify --TESS_ENV development ] -t [ babelify --presets [ es2015 ] ] -o dist/worker.dev.js\\" \\"http-server -p 7355\\""},"version":"1.0.19"}')},function(t,e,s){"use strict";var i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var s in t)Object.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e.default=t,e},n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var r=i(s(8)),o=s(9),a=s(0),l=s(10),c=n(s(1)),u=new(s(16).Tilemap)("forest_tiles.png",12,16,32);u.loadTile(0,13,"Mushroom"),u.loadTile(0,13,"Mushroom",0,1),u.loadTile(6,0,"Pine_1",2,4),u.loadTile(7,0,"Pine_2",2,5),u.loadTile(6,1,"Pine_3",3,4),u.loadTile(7,1,"Pine_4",3,5),u.loadObject(0,6,"Pit_1_1",5,5,1,1,!0),u.loadObject(0,7,"Pit_2_1",6,5,1,1,!0),u.loadObject(0,8,"Pit_3_1",7,5,1,1,!0),u.loadObject(1,6,"Pit_1_2",5,6,1,1,!0),u.loadObject(1,7,"Pit_2_2",6,6,1,1,!0),u.loadObject(1,8,"Pit_3_2",7,6,1,1,!0),u.loadObject(2,6,"Pit_1_3",5,7,1,1,!0),u.loadObject(2,7,"Pit_2_3",6,7,1,1,!0),u.loadObject(2,8,"Pit_3_3",7,7,1,1,!0);var h=new c.default("forest.png"),p=new o.Fader(.2,.6,.01),d=new o.Fader(0,.6,-.01),f=new o.Fader(.05,1,-.1,.9);d.value=0,function t(){var e;r.moveBrona(f.value),function(){a.ctx.clearRect(0,0,a.canvas.clientWidth,a.canvas.clientHeight),h.draw(a.ctx,0,0,a.canvas.clientWidth,a.canvas.clientHeight);for(var t=0,e=u.tiles;t<e.length;t++){e[t].draw(a.ctx)}r.obj.draw(a.ctx)}(),document.getElementById("spell-display").innerHTML=l.spellState.toString(),l.spellState.isCasting?(e=a.ctx.globalAlpha,a.ctx.globalAlpha=p.value,a.ctx.fillRect(0,0,a.canvas.clientWidth,a.canvas.clientHeight),a.ctx.globalAlpha=e,p.increment(),d.reset(),f.increment(),l.spellState.drawSpell()):(!function(){var t=a.ctx.globalAlpha;a.ctx.globalAlpha=d.value,a.ctx.fillRect(0,0,a.canvas.clientWidth,a.canvas.clientHeight),a.ctx.globalAlpha=t,d.increment()}(),p.reset(),f.reset()),window.requestAnimationFrame(t)}()},function(t,e,s){"use strict";var i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var s in t)Object.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var n=s(2),r=i(s(3)),o=s(0),a=i(s(1));o.canvas.addEventListener("mousedown",(function(t){0==t.button&&u(r.mousePosition.x,r.mousePosition.y)})),o.canvas.addEventListener("mousemove",(function(){r.mousedown&&u(r.mousePosition.x,r.mousePosition.y)})),e.obj=new a.SpriteObject(3,4,1,1,new a.default("brona.png","Brona"));var l=.3,c={x:null,y:null};function u(t,s){c={x:o.pxToGame(t)-e.obj.w/2,y:o.pxToGame(s)-e.obj.h/2}}function h(){c.x=null,c.y=null}function p(t){var s=n.correctCollisions(e.obj,t);return(s.x||s.y)&&(t=s),t}e.target=u,e.cancelTargetPosition=h,e.moveBrona=function(t){var s,i=(s={x:0,y:0},null!=c.x&&(s.x=c.x-e.obj.x),null!=c.y&&(s.y=c.y-e.obj.y),s),n=function(t){var e=Math.sqrt(t.x*t.x+t.y*t.y);if(e>0){var s={x:t.x/e,y:t.y/e};return{x:s.x*l,y:s.y*l}}}(i);Math.sqrt(i.x*i.x+i.y*i.y)<=l&&(n=i,h());var r=p(n),o=r.x*t,a=r.y*t;e.obj.x+=o,e.obj.y+=a,p(i)}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e,s,i){void 0===i&&(i=1),this.range={min:t,max:e},this.inc=s,this.originalInc=s,this.accelFactor=i,this.reset()}return Object.defineProperty(t.prototype,"value",{get:function(){return this.currentValue},set:function(t){this.currentValue=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"done",{get:function(){return this.doneFading},enumerable:!0,configurable:!0}),t.prototype.increment=function(){this.doneFading||(this.currentValue+=this.inc,this.inc=this.inc*this.accelFactor,this.inc>0?this.currentValue>=this.range.max&&(this.currentValue=this.range.max,this.doneFading=!0):this.currentValue<=this.range.min&&(this.currentValue=this.range.min,this.doneFading=!0))},t.prototype.reset=function(){this.inc=this.originalInc,this.inc>0?this.currentValue=this.range.min:this.currentValue=this.range.max,this.doneFading=!1},t}();e.Fader=i},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(3),n=s(0),r=s(11),o=s(15);e.spellState=new r.SpellState,n.canvas.addEventListener("contextmenu",(function(t){return t.preventDefault(),!1}),!1),n.canvas.addEventListener("mousedown",(function(t){2==t.button&&(e.spellState.startSpell(),e.spellState.resetSpellPoints())})),n.canvas.addEventListener("mousemove",(function(t){e.spellState.isCasting&&i.rightMousedown&&e.spellState.addSpellPoint(new o.Vector(t.offsetX,t.offsetY))})),n.canvas.addEventListener("mouseup",(function(t){2==t.button&&e.spellState.isCasting&&(e.spellState.saveSpell(),e.spellState.startSpellExpiry())}))},function(t,e,s){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var n=i(s(12)),r=s(0),o=function(){function t(){this.casting=!1,this.spellPoints=[],this.spellLetters=[],this.castingTimeout=null,this.spellCooking=!1}return Object.defineProperty(t.prototype,"isCasting",{get:function(){return this.casting},enumerable:!0,configurable:!0}),t.prototype.toString=function(){return this.spellLetters.length>0?this.spellLetters.join(""):this.spellCooking?"Spell cooking...":"No spell"},t.prototype.resetSpellPoints=function(){this.spellPoints=[]},t.prototype.addSpellPoint=function(t){this.spellPoints.push({x:t.x,y:t.y})},t.prototype.startSpell=function(){this.casting=!0,this.castingTimeout&&clearTimeout(this.castingTimeout),this.castingTimeout=null},t.prototype.startSpellExpiry=function(){var t=this;this.castingTimeout=setTimeout((function(){t.casting=!1}),1e3)},t.prototype.drawSpell=function(){if(r.ctx.beginPath(),r.ctx.lineWidth=30,r.ctx.strokeStyle="orange",this.spellPoints.length>0){r.ctx.moveTo(this.spellPoints[0].x,this.spellPoints[0].y);for(var t=0,e=this.spellPoints;t<e.length;t++){var s=e[t];r.ctx.lineTo(s.x,s.y)}}r.ctx.stroke()},t.prototype.saveSpell=function(){var t=this,e=document.createElement("canvas");e.width=r.canvas.width,e.height=r.canvas.height;var s=e.getContext("2d");if(s.strokeStyle="white",s.fillStyle="white",s.fillRect(0,0,e.width,e.height),s.beginPath(),s.lineWidth=30,s.strokeStyle="orange",this.spellPoints.length>0){s.moveTo(this.spellPoints[0].x,this.spellPoints[0].y);for(var i=0,o=this.spellPoints;i<o.length;i++){var a=o[i];s.lineTo(a.x,a.y)}}s.stroke(),document.getElementById("spell-display").innerHTML="Thinking...",this.spellCooking=!0,n.default.recognize(e).then((function(e){t.spellLetters.push(e.text),t.spellCooking=!1})),this.resetSpellPoints()},t}();e.SpellState=o},function(t,e,s){const i=s(5),n=s(13),r=s(14),o=s(6).version,a=function(t={}){var e=new l(Object.assign({},i.defaultOptions,t));return e.create=a,e.version=o,e};class l{constructor(t){this.worker=null,this.workerOptions=t,this._currentJob=null,this._queue=[]}recognize(t,e={}){return this._delay(s=>{"string"==typeof e&&(e={lang:e}),e.lang=e.lang||"eng",s._send("recognize",{image:t,options:e,workerOptions:this.workerOptions})})}detect(t,e={}){return this._delay(s=>{s._send("detect",{image:t,options:e,workerOptions:this.workerOptions})})}terminate(){this.worker&&i.terminateWorker(this),this.worker=null,this._currentJob=null,this._queue=[]}_delay(t){this.worker||(this.worker=i.spawnWorker(this,this.workerOptions));var e=new r(this);return this._queue.push(s=>{this._queue.shift(),this._currentJob=e,t(e)}),this._currentJob||this._dequeue(),e}_dequeue(){this._currentJob=null,this._queue.length&&this._queue[0]()}_recv(t){"resolve"===t.status&&"recognize"===t.action&&(t.data=n(t.data)),this._currentJob.id===t.jobId?this._currentJob._handle(t):console.warn("Job ID "+t.jobId+" not known.")}}t.exports=a()},function(t,e){t.exports=function(t){return t.paragraphs=[],t.lines=[],t.words=[],t.symbols=[],t.blocks.forEach((function(e){e.page=t,e.lines=[],e.words=[],e.symbols=[],e.paragraphs.forEach((function(s){s.block=e,s.page=t,s.words=[],s.symbols=[],s.lines.forEach((function(i){i.paragraph=s,i.block=e,i.page=t,i.symbols=[],i.words.forEach((function(n){n.line=i,n.paragraph=s,n.block=e,n.page=t,n.symbols.forEach((function(r){r.word=n,r.line=i,r.paragraph=s,r.block=e,r.page=t,r.line.symbols.push(r),r.paragraph.symbols.push(r),r.block.symbols.push(r),r.page.symbols.push(r)})),n.paragraph.words.push(n),n.block.words.push(n),n.page.words.push(n)})),i.block.lines.push(i),i.page.lines.push(i)})),s.page.paragraphs.push(s)}))})),t}},function(t,e,s){const i=s(5);let n=0;t.exports=class{constructor(t){this.id="Job-"+ ++n+"-"+Math.random().toString(16).slice(3,8),this._instance=t,this._resolve=[],this._reject=[],this._progress=[],this._finally=[]}then(t,e){return this._resolve.push?this._resolve.push(t):t(this._resolve),e&&this.catch(e),this}catch(t){return this._reject.push?this._reject.push(t):t(this._reject),this}progress(t){return this._progress.push(t),this}finally(t){return this._finally.push(t),this}_send(t,e){i.sendPacket(this._instance,{jobId:this.id,action:t,payload:e})}_handle(t){var e=t.data;let s=!1;"resolve"===t.status?(0===this._resolve.length&&console.log(e),this._resolve.forEach(t=>{var s=t(e);s&&"function"==typeof s.then&&console.warn("TesseractJob instances do not chain like ES6 Promises. To convert it into a real promise, use Promise.resolve.")}),this._resolve=e,this._instance._dequeue(),s=!0):"reject"===t.status?(0===this._reject.length&&console.error(e),this._reject.forEach(t=>t(e)),this._reject=e,this._instance._dequeue(),s=!0):"progress"===t.status?this._progress.forEach(t=>t(e)):console.warn("Message type unknown",t.status),s&&this._finally.forEach(t=>t(e))}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(t,e){this.x=t,this.y=e};e.Vector=i},function(t,e,s){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)e.hasOwnProperty(s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=s(2),a=r(s(4)),l=r(s(1)),c=function(t){function e(e,s,i,n,r,o,a,l){var c=t.call(this,s,i,n,r)||this;return c.tilerow=o,c.tilecol=a,c.name=l,c.map=e,c}return n(e,t),e.prototype.sprite=function(){return this.map.loadSprite(this.tilerow,this.tilecol),this.map.tileSprites[this.tilerow][this.tilecol]},e}(a.default),u=function(){function t(t,e,s,i){this.filepath=t,this.tileSprites=[];for(var n=0;n<e;n++){this.tileSprites.push([]);for(var r=0;r<s;r++)this.tileSprites[n].push(new l.default)}this.tiles=[],this.tilewidth=i,this.nrows=e,this.ncols=s}return t.prototype.loadSprite=function(t,e){return this.tileSprites[t][e].loaded?this.tileSprites[t][e]:new l.default(this.filepath,e*this.tilewidth,t*this.tilewidth,this.tilewidth,this.tilewidth)},t.prototype.loadTile=function(t,e,s,i,n,r,o){void 0===s&&(s="Unnamed"),void 0===i&&(i=0),void 0===n&&(n=0),void 0===r&&(r=1),void 0===o&&(o=1),this.tileSprites[t][e]=this.loadSprite(t,e);var a=new c(this,i,n,r,o,t,e,s);return this.tiles.push(a),a},t.prototype.loadObject=function(t,e,s,i,n,r,a,l){void 0===s&&(s="Unnamed"),void 0===i&&(i=0),void 0===n&&(n=0),void 0===r&&(r=1),void 0===a&&(a=1),void 0===l&&(l=!1);var c=this.loadTile(t,e,s,i,n,r,a);l&&o.registerCollider(c)},t}();e.Tilemap=u}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,